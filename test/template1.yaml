apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-template
  title: Spring Boot Service
  description: Create a simple microservice using Spring Boot Java
  tags:
    - recommended
    - java
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        awsSecretManager:
          title: AWS Secrets Manager
          type: string
          ui:field: awsSecretRepo
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  targets:
    - type: dir
      title: src
      path: '{{ folderName }}/{{ appName }}/src'
    - type: dir
      title: config
      path: '{{ folderName }}/{{ appName }}/config'
    - type: file
      title: pom.xml
      path: '{{ folderName }}/{{ appName }}/pom.xml'
      content: |
        <?xml version="1.0"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>{{ appName }}</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>{{ appName }}</name>
          <description>Demo project for Spring Boot</description>
          <packaging>jar</packaging>
          ...
        </project>
